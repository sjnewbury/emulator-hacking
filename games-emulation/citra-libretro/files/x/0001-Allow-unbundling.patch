diff --git a/CMakeLists.txt b/CMakeLists.txt
index 729c6ba4d..c0f7a53a4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -24,6 +24,11 @@ option(ENABLE_LIBRETRO "Enable the LibRetro frontend" OFF)
 
 option(ENABLE_WEB_SERVICE "Enable web services (telemetry, etc.)" ON)
 
+if (ENABLE_WEB_SERVICE)
+    option(USE_SYSTEM_SSL "Use the system SSL libs (instead of the bundled libressl)" OFF)
+endif()
+
+
 option(ENABLE_CUBEB "Enables the cubeb audio backend" OFF)
 
 option(ENABLE_FFMPEG_AUDIO_DECODER "Enable FFmpeg audio (AAC) decoder" OFF)
@@ -43,6 +48,12 @@ CMAKE_DEPENDENT_OPTION(COMPILE_WITH_DWARF "Add DWARF debugging information" ON "
 
 option(USE_SYSTEM_BOOST "Use the system Boost libs (instead of the bundled ones)" OFF)
 
+option(USE_SYSTEM_FMT "Use the system libfmt (instead of the bundled ones)" OFF)
+
+option(USE_SYSTEM_XBYAK "Use the system xbyak (instead of the bundled ones)" OFF)
+
+option(USE_SYSTEM_CRYPTOPP "Use the system crypto++ (instead of the bundled ones)" OFF)
+
 CMAKE_DEPENDENT_OPTION(ENABLE_FDK "Use FDK AAC decoder" OFF "NOT ENABLE_FFMPEG_AUDIO_DECODER;NOT ENABLE_MF" OFF)
 
 if(NOT EXISTS ${PROJECT_SOURCE_DIR}/.git/hooks/pre-commit)
@@ -65,7 +76,7 @@ function(check_submodules_present)
         endif()
     endforeach()
 endfunction()
-check_submodules_present()
+#check_submodules_present()
 
 configure_file(${PROJECT_SOURCE_DIR}/dist/compatibility_list/compatibility_list.qrc
                ${PROJECT_BINARY_DIR}/dist/compatibility_list/compatibility_list.qrc
@@ -430,6 +441,22 @@ if (NOT USE_SYSTEM_BOOST)
 endif()
 
 enable_testing()
+
+if (USE_SYSTEM_FMT AND NOT TARGET fmt)
+    find_package(fmt REQUIRED)
+    add_library(fmt ALIAS fmt::fmt)
+endif()
+
+if (USE_SYSTEM_SSL AND NOT TARGET libressl)
+    include(FindPkgConfig)
+    find_package(libssl)
+endif()
+
+if (USE_SYSTEM_CRYPTOPP AND NOT TARGET cryptopp)
+    include(FindPkgConfig)
+    find_package(libcryptopp)
+endif()
+
 add_subdirectory(externals)
 
 # Boost
diff --git a/externals/CMakeLists.txt b/externals/CMakeLists.txt
index fdd09006c..e02f8867b 100644
--- a/externals/CMakeLists.txt
+++ b/externals/CMakeLists.txt
@@ -17,9 +17,11 @@ add_library(boost INTERFACE)
 target_include_directories(boost SYSTEM INTERFACE ${Boost_INCLUDE_DIR})
 
 # Boost::serialization
-file(GLOB boost_serialization_SRC "${CMAKE_SOURCE_DIR}/externals/boost/libs/serialization/src/*.cpp")
-add_library(boost_serialization STATIC ${boost_serialization_SRC})
-target_link_libraries(boost_serialization PUBLIC boost)
+if (NOT USE_SYSTEM_BOOST)
+    file(GLOB boost_serialization_SRC "${CMAKE_SOURCE_DIR}/externals/boost/libs/serialization/src/*.cpp")
+    add_library(boost_serialization STATIC ${boost_serialization_SRC})
+    target_link_libraries(boost_serialization PUBLIC boost)
+endif()
 
 # Add additional boost libs here; remember to ALIAS them in the root CMakeLists!
 
@@ -28,12 +30,18 @@ add_library(catch-single-include INTERFACE)
 target_include_directories(catch-single-include INTERFACE catch/single_include)
 
 # Crypto++
-add_subdirectory(cryptopp)
+if (NOT USE_SYSTEM_CRYPTOPP)
+    add_subdirectory(cryptopp)
+endif()
 
 # Xbyak
 if (ARCHITECTURE_x86_64)
     add_library(xbyak INTERFACE)
-    target_include_directories(xbyak SYSTEM INTERFACE ./xbyak/xbyak)
+    if (USE_SYSTEM_XBYAK)
+        target_include_directories(xbyak INTERFACE /usr/include/xbyak)
+    else()
+        target_include_directories(xbyak INTERFACE ./xbyak/xbyak)
+    endif()
     target_compile_definitions(xbyak INTERFACE XBYAK_NO_OP_NAMES)
 endif()
 
@@ -46,8 +54,12 @@ if (ARCHITECTURE_x86_64 OR ARCHITECTURE_ARM64)
 endif()
 
 # libfmt
-add_subdirectory(fmt)
-add_library(fmt::fmt ALIAS fmt)
+if (NOT USE_SYSTEM_FMT)
+    add_subdirectory(fmt)
+    add_library(fmt::fmt ALIAS fmt)
+else()
+    set(DYNARMIC_NO_BUNDLED_FMT ON)
+endif()
 
 # getopt
 if (MSVC)
@@ -105,11 +117,12 @@ target_include_directories(libretro INTERFACE ./libretro)
 
 if (ENABLE_WEB_SERVICE)
     # LibreSSL
-    set(LIBRESSL_SKIP_INSTALL ON CACHE BOOL "")
-    add_subdirectory(libressl EXCLUDE_FROM_ALL)
-    target_include_directories(ssl INTERFACE ./libressl/include)
-    target_compile_definitions(ssl PRIVATE -DHAVE_INET_NTOP)
-
+    if (NOT USE_SYSTEM_SSL)
+        set(LIBRESSL_SKIP_INSTALL ON CACHE BOOL "")
+        add_subdirectory(libressl EXCLUDE_FROM_ALL)
+        target_include_directories(ssl INTERFACE ./libressl/include)
+        target_compile_definitions(ssl PRIVATE -DHAVE_INET_NTOP)
+    endif()
     # JSON
     add_library(json-headers INTERFACE)
     target_include_directories(json-headers INTERFACE ./json)
